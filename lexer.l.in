%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "taz.h"
#include "smach.h"
#include "gram.h"

extern struct mempool symbolnamepool, macrotextpool;

static char *fixup_string(char *);
static char *fixup_macarg(char *);
int falseclause=0;
%}

ws	[ \t]
digit	[0-9]
decimal	[1-9][0-9]*
octal	0[0-7]*
hex	0[xX][0-9a-fA-f]+
hex2	$[0-9a-fA-f]+
binary  "%"[0-1]+
number	{decimal}|{octal}|{hex}

<- definitions ->

%s OPCODE OPERAND
%x COMMENT FALSECLAUSE MACRO MACRO2 MACARG

%%


\/\*([^*]|\*+[^*/])\*+\/	{ char *p=yytext; while(*p) if(*p++=='\n') current_lineno++; numlines++; }
<COMMENT>[^\n]*			;
{trailcomment}			BEGIN(COMMENT);
<INITIAL>{ws}*{linecomment}	BEGIN(COMMENT);

<INITIAL>{ws}+			BEGIN(falseclause? FALSECLAUSE:OPCODE);
<INITIAL,OPCODE>{label}:	if(falseclause) BEGIN(FALSECLAUSE); else { BEGIN(OPCODE); yytext[strlen(yytext)-1]='\0'; yylval.str=poolstring(&symbolnamepool, yytext); return T_LABEL; }
<INITIAL>{label}		if(falseclause) BEGIN(FALSECLAUSE); else { BEGIN(OPCODE); yylval.str=poolstring(&symbolnamepool, yytext); return T_LABEL; }

<MACARG>\,			return T_COMMA;
<MACARG>{ws}+			;
<MACARG>[^ \t\n,;][^\n,;]*	{ /* FIX  Hardcoded ; */ yylval.str=fixup_macarg(yytext); return T_MACARG; }
<MACARG>{trailcomment}[^\n]*    { BEGIN(INITIAL); return T_EMA; }

<- opcoderegexps ->

<OPCODE>\.?[sS][eE][cC][tT][iI][oO][nN]	{ BEGIN(OPERAND); return T_SECTION; }
<OPCODE>\.?[eE][nN][dD]			{ BEGIN(OPERAND); return T_END; }
<OPCODE>\.?[eE][qQ][uU]			{ BEGIN(OPERAND); return T_EQU; }
<OPCODE>\.?[sS][eE][tT]			{ BEGIN(OPERAND); return T_SET; }
<OPCODE>\.?[iI][nN][cC][lL][uU][dD][eE]	{ BEGIN(OPERAND); return T_INCLUDE; }
<OPCODE>\.?[iI][nN][cC][dD][iI][rR]	{ BEGIN(OPERAND); return T_INCDIR; }
<OPCODE>\.?[eE][nN][dD][mM]		{ BEGIN(OPERAND); return T_ENDM; }
<OPCODE>\.?[mM][eE][xX][iI][tT]		{ BEGIN(OPERAND); return T_MEXIT; }
<OPCODE>\.?[bB][yY][tT][eE]             { BEGIN(OPERAND); return T_BYTE; }
<OPCODE>\.?[wW][oO][rR][dD]             { BEGIN(OPERAND); return T_WORD; }
<OPCODE>\.?[oO][rR][gG]                 { BEGIN(OPERAND); return T_ORG; }
<OPCODE>\.?[cC][nN][oO][pP]             { BEGIN(OPERAND); return T_CNOP; }
<OPCODE>\.?[eE][nN][dD][cC]		{ BEGIN(COMMENT); return T_ENDC; }
<FALSECLAUSE>\.?[eE][nN][dD][cC]	{ if(!--falseclause) { BEGIN(COMMENT); return T_ENDC; } }
<OPCODE>\.?[iI][fF][dD]			{ BEGIN(OPERAND); return T_IFD; }
<FALSECLAUSE>\.?[iI][fF][dD]		{ falseclause++; }
<OPCODE>\.?[iI][fF][nN][dD]		{ BEGIN(OPERAND); return T_IFND; }
<FALSECLAUSE>\.?[iI][fF][nN][dD]	{ falseclause++; }
<OPCODE>\.?[iI][fF][cC]			{ BEGIN(OPERAND); return T_IFC; }
<FALSECLAUSE>\.?[iI][fF][cC]		{ falseclause++; }
<OPCODE>\.?[iI][fF][nN][cC]		{ BEGIN(OPERAND); return T_IFNC; }
<FALSECLAUSE>\.?[iI][fF][nN][cC]	{ falseclause++; }
<OPCODE>\.?[iI][fF][eE][qQ]		{ BEGIN(OPERAND); return T_IFEQ; }
<FALSECLAUSE>\.?[iI][fF][eE][qQ]	{ falseclause++; }
<OPCODE>\.?[iI][fF][nN][eE]		{ BEGIN(OPERAND); return T_IFNE; }
<FALSECLAUSE>\.?[iI][fF][nN][eE]	{ falseclause++; }
<OPCODE>\.?[iI][fF][lL][tT]		{ BEGIN(OPERAND); return T_IFLT; }
<FALSECLAUSE>\.?[iI][fF][lL][tT]	{ falseclause++; }
<OPCODE>\.?[iI][fF][lL][eE]		{ BEGIN(OPERAND); return T_IFLE; }
<FALSECLAUSE>\.?[iI][fF][lL][eE]	{ falseclause++; }
<OPCODE>\.?[iI][fF][gG][tT]		{ BEGIN(OPERAND); return T_IFGT; }
<FALSECLAUSE>\.?[iI][fF][gG][tT]	{ falseclause++; }
<OPCODE>\.?[iI][fF][gG][eE]		{ BEGIN(OPERAND); return T_IFGE; }
<FALSECLAUSE>\.?[iI][fF][gG][eE]	{ falseclause++; }

<FALSECLAUSE>[^\n] { BEGIN(COMMENT); }

{number}		{yylval.num=strtol(yytext, NULL, 0); return T_NUMBER;}
{hex2}			{yylval.num=strtol(yytext+1, NULL, 16); return T_NUMBER;}
{binary}                {yylval.num=strtol(yytext+1, NULL, 2); return T_NUMBER;}


<- stdregexps ->

<- operregexps ->

<OPCODE>\.?[mM][aA][cC][rR][oO]	{ BEGIN(MACRO); return T_MACRO; }
<MACRO>{ws}+\.?[eE][nN][dD][mM]	{ BEGIN(OPCODE); yyless(((yytext[yyleng-5]=='.')?(yyleng-5):(yyleng-4))); yylval.str=poolstring(&macrotextpool, yytext); return T_MBODY; }
<MACRO>[^\n] { yymore(); BEGIN(MACRO2); }
<MACRO2>[^\n]+ { yymore(); }

(\"([^"\\]|\\.)*\")|(\'([^'\\]|\\.)*\')	{
	yylval.str=fixup_string(yytext);
	return T_STRING;
}

<OPCODE>{label}		{ if((yylval.sym=findmacro(yytext))) { BEGIN(MACARG); return T_MAC; } errormsg("Unknown opcode %s ignored", yytext); BEGIN(COMMENT); }
{label}				{ yylval.str=yytext; return T_SYMBOL; }

{ws}+	;
<MACRO,MACRO2>\n { current_lineno++; numlines++; yymore(); BEGIN(MACRO); }
<MACARG>\n	{ unput('\n'); BEGIN(INITIAL); return T_EMA; }
<*>\n	{ current_lineno++; numlines++; BEGIN(INITIAL); }
["']	{ errormsg("Unterminated string literal"); BEGIN(COMMENT); }
.	{ errormsg("Unknown character \"%s\"", yytext); BEGIN(COMMENT); }

%%

static char fixup_char(char **ptr, int n, int m, int b)
{
  int z;

  if(m<=0) return n;
  if(**ptr>='0' && **ptr<='9')
    z=**ptr&0xf;
  else if((**ptr>='A' && **ptr<='F') || (**ptr>='a' && **ptr<='f'))
    z=(**ptr&0xf)+9;
  else return n;
  if(z<b) {
    (*ptr)++;
    return fixup_char(ptr, n*b+z, m-1, b);
  }
  return n;
}

static char *fixup_string(char *ptr)
{
  char *dest=ptr, *src=ptr;
  char q=*src++;

  while(*src!=q)
    if((*dest++=*src++)=='\\')
      switch(dest[-1]=*src++) {
      case 'a': dest[-1]='\a'; break;
      case 'b': dest[-1]='\b'; break;
      case 'f': dest[-1]='\f'; break;
      case 'n': dest[-1]='\n'; break;
      case 'r': dest[-1]='\r'; break;
      case 't': dest[-1]='\t'; break;
      case 'v': dest[-1]='\v'; break;
      case 'x': dest[-1]=fixup_char(&src, 0, 2, 16); break;
      case '0': dest[-1]=fixup_char(&src, 0, 2, 8); break;
      case '1': dest[-1]=fixup_char(&src, 1, 2, 8); break;
      case '2': dest[-1]=fixup_char(&src, 2, 2, 8); break;
      case '3': dest[-1]=fixup_char(&src, 3, 2, 8); break;
      case '4': dest[-1]=fixup_char(&src, 4, 2, 8); break;
      case '5': dest[-1]=fixup_char(&src, 5, 2, 8); break;
      case '6': dest[-1]=fixup_char(&src, 6, 2, 8); break;
      case '7': dest[-1]=fixup_char(&src, 7, 2, 8); break;
      }
  *dest='\0';
  return ptr;
}

static char *fixup_macarg(char *ptr)
{
  int l;
  while(*ptr==' ' || *ptr=='\t') ptr++;
  for(l=strlen(ptr); l>0 && (ptr[l-1]==' ' || ptr[l-1]=='\t'); ptr[--l]='\0');
  return ptr;
}

void yyerror()
{
  errormsg("Parse error");
  BEGIN(COMMENT);
}

int yywrap()
{
  BEGIN(INITIAL);
  return file_yywrap();
}
